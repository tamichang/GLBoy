
WavePlane wp = new WavePlane(800,800);

void setup() {
  size(1000, 780, P3D);
  colorMode(HSB, 360, 100, 100, 100);
  background(0,0,0);
  stroke(330,13,99);
  //noStroke();
  //fill(150,13,99);
  noFill();
}

void draw() {
  background(212,84,26);
  
  camera(mouseX, mouseY, (height/2) / tan(PI/6), width/2, height/2, 0, 0, 1, 0);
  
  rotateX(-0.5);
  translate(width/2, height*0.6, -200);
  
  wp.tick();
  wp.draw();
  
  if(rec) saveFrame("rec/" + System.currentTimeMillis());
}

class WavePlane {
  int w, h;
  
  int line_count = 50;
  int point_count = 50;
  
  float[][][] line = new float[line_count][point_count][3];
  
  float dx, dz;
  int wave_width = 300;
  float da = 0.1;
  float dla = 0.5;
  
  float myu = 0;
  float max_sigma2 = 0.5;
  
  float max_distance = sqrt(pow(abs(0-point_count/2),2) + pow(abs(0-line_count/2),2));
  
  WavePlane(int w, int h) {
    this.w = w; this.h = h;
    dx = w/point_count;
    dz = h/line_count;
    //tick();
  }
  
  void tick() {
    myu = map(frameCount%120,0,120,10,-10);
    for(int j=0; j<line_count; j++) {
      //float sigma2 = map(abs(line_count/2-j),0,line_count/2,max_sigma2,5);
      float sigma2 = max_sigma2;
      for(int i=0; i<point_count; i++) {
        float x = i*dx;
        //float y = sin(i*da+dla*j+frameCount*0.1) * wave_width/2;
        float distance = sqrt(pow(abs(i-point_count/2),2) + pow(abs(j-line_count/2),2));
        //float y = -1 * 1/sqrt(TWO_PI*sigma2) * exp(-1*pow(map(i,0,point_count-1,-5,5)-myu,2)/(2*sigma2)) * wave_width;
        float y = -1 * 1/sqrt(TWO_PI*sigma2) * exp(-1*pow(map(distance,max_distance,0,-5,0)-myu,2)/(2*sigma2)) * wave_width;
        //y = y * map(abs(line_count/2-j),0,line_count/2,2,0);
        //if(frameCount == 10 && j==0) println(map(distance,50,0,-5,0));
        float[] point = {x, y, j*dz};
        line[j][i] = point;
      }
    }
  }
  
  void draw_point() {
    for(int j=0; j<line_count; j++) {
      for(int i=0; i<point_count; i++) {
        float[] p = line[j][i];
        point(p[0], p[1], p[2]);
      }
    }
  }
  
  void draw() {
    pushMatrix();
    translate(-w/2, 0, 0);
    for(int l=0; l<line_count-1; l++) {
      for(int p=0; p<point_count-1; p++) {
        float[] p1, p2, p3, p4;
        p1 = line[l][p];
        p2 = line[l][p+1];
        p3 = line[l+1][p];
        p4 = line[l+1][p+1];
        beginShape(TRIANGLES);
        //fill(360/point_count*p,10,95);
        //fill(250,map(p1[1],-50,50,0,100),100);
        vertex(p1[0], p1[1], p1[2]);
        //fill(250,map(p2[1],-50,50,0,100),100);
        vertex(p2[0], p2[1], p2[2]);
        //fill(250,map(p3[1],-50,50,0,100),100);
        vertex(p3[0], p3[1], p3[2]);
        
        //fill(250,map(p2[1],-50,50,0,100),100);
        vertex(p2[0], p2[1], p2[2]);
        //fill(250,map(p3[1],-50,50,0,100),100);
        vertex(p3[0], p3[1], p3[2]);
        //fill(250,map(p4[1],-50,50,0,100),100);
        vertex(p4[0], p4[1], p4[2]);
        endShape();
      }
    }
    popMatrix();
  }
  
}

boolean rec = false;

void keyPressed() {
  if (key == 'r') { 
    rec = rec ^ true;
  }
  if (keyCode == ENTER) {
    saveFrame("image/screen-" + System.currentTimeMillis() + ".png");
  }
  
  
}
